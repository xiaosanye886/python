python 网络篇(网络编程)
        一.楔子
你现在已经学会了写python代码，假如你写了两个python文件a.py和b.py，分别去运行，你就会发现，这两个python的文件分别运行的很好。但是如果这两个程序之间想要传递一个数据，你要怎么做呢？

这个问题以你现在的知识就可以解决了，我们可以创建一个文件，把a.py想要传递的内容写到文件中，然后b.py从这个文件中读取内容就可以了。



 

但是当你的a.py和b.py分别在不同电脑上的时候，你要怎么办呢？

类似的机制有计算机网盘，qq等等。我们可以在我们的电脑上和别人聊天，可以在自己的电脑上向网盘中上传、下载内容。这些都是两个程序在通信。

     二.软件开发的架构
我们了解的涉及到两个程序之间通讯的应用大致可以分为两种：

第一种是应用类：qq、微信、网盘、优酷这一类是属于需要安装的桌面应用

第二种是web类：比如百度、知乎、博客园等使用浏览器访问就可以直接使用的应用

这些应用的本质其实都是两个程序之间的通讯。而这两个分类又对应了两个软件开发的架构～

1.C/S架构
C/S即：Client与Server ，中文意思：客户端与服务器端架构，这种架构也是从用户层面（也可以是物理层面）来划分的。

这里的客户端一般泛指客户端应用程序EXE，程序需要先安装后，才能运行在用户的电脑上，对用户的电脑操作系统环境依赖较大。



 

 

2.B/S架构
B/S即：Browser与Server,中文意思：浏览器端与服务器端架构，这种架构是从用户层面来划分的。

Browser浏览器，其实也是一种Client客户端，只是这个客户端不需要大家去安装什么应用程序，只需在浏览器上通过HTTP请求服务器端相关的资源（网页资源），客户端Browser浏览器就能进行增删改查。

 回
 

三.网络基础
网络基础

1.一个程序如何在网络上找到另一个程序？
首先，程序必须要启动，其次，必须有这台机器的地址，我们都知道我们人的地址大概就是国家\省\市\区\街道\楼\门牌号这样字。那么每一台联网的机器在网络上也有自己的地址，它的地址是怎么表示的呢？

就是使用一串数字来表示的，例如：100.4.5.6

 什么是ip地址
 什么是端口
因此ip地址精确到具体的一台电脑，而端口精确到具体的程序。

                        2.osi七层模型
引子
须知一个完整的计算机系统是由硬件、操作系统、应用软件三者组成,具备了这三个条件，一台计算机系统就可以自己跟自己玩了（打个单机游戏，玩个扫雷啥的）

如果你要跟别人一起玩，那你就需要上网了，什么是互联网？

互联网的核心就是由一堆协议组成，协议就是标准，比如全世界人通信的标准是英语，如果把计算机比作人，互联网协议就是计算机界的英语。所有的计算机都学会了互联网协议，那所有的计算机都就可以按照统一的标准去收发信息从而完成通信了。

osi七层模型
人们按照分工不同把互联网协议从逻辑上划分了层级：



 

 

3.socket概念
socket层


理解socket
Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。

3.套接字（socket）的发展史
套接字起源于 20 世纪 70 年代加利福尼亚大学伯克利分校版本的 Unix,即人们所说的 BSD Unix。 因此,有时人们也把套接字称为“伯克利套接字”或“BSD 套接字”。一开始,套接字被设计用在同 一台主机上多个应用程序之间的通讯。这也被称进程间通讯,或 IPC。套接字有两种（或者称为有两个种族）,分别是基于文件型的和基于网络型的。 

基于文件类型的套接字家族
套接字家族的名字：AF_UNIX

unix一切皆文件，基于文件的套接字调用的就是底层的文件系统来取数据，两个套接字进程运行在同一机器，可以通过访问同一个文件系统间接完成通信

基于网络类型的套接字家族
套接字家族的名字：AF_INET

(还有AF_INET6被用于ipv6，还有一些其他的地址家族，不过，他们要么是只用于某个平台，要么就是已经被废弃，或者是很少被使用，或者是根本没有实现，所有地址家族中，AF_INET是使用最广泛的一个，python支持很多种地址家族，但是由于我们只关心网络编程，所以大部分时候我么只使用AF_INET)

 

4.tcp协议和udp协议
TCP（Transmission Control Protocol）可靠的、面向连接的协议（eg:打电话）、传输效率低全双工通信（发送缓存&接收缓存）、面向字节流。使用TCP的应用：Web浏览器；电子邮件、文件传输程序。

UDP（User Datagram Protocol）不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对多、面向报文，尽最大努力服务，无拥塞控制。使用UDP的应用：域名系统 (DNS)；视频流；IP语音(VoIP)。

我知道说这些你们也不懂，直接上图。



           四.套接字（socket）初使用
基于TCP协议的socket
tcp是基于链接的，必须先启动服务端，然后再启动客户端去链接服务端

server端

复制代码
import socket
sk = socket.socket()
sk.bind(('127.0.0.1',8898))  #把地址绑定到套接字
sk.listen()          #监听链接
conn,addr = sk.accept() #接受客户端链接
ret = conn.recv(1024)  #接收客户端信息
print(ret)       #打印客户端信息
conn.send(b'hi')        #向客户端发送信息
conn.close()       #关闭客户端套接字
sk.close()        #关闭服务器套接字(可选)
复制代码
client端

复制代码
import socket
sk = socket.socket()           # 创建客户套接字
sk.connect(('127.0.0.1',8898))    # 尝试连接服务器
sk.send(b'hello!')
ret = sk.recv(1024)         # 对话(发送/接收)
print(ret)
sk.close()            # 关闭客户套接字
复制代码


 

   话不多说,知己上代码吧                   

 tcp代码

复制代码
from socket import socket
sk = socket(type=socket.SOCK_STREAM)
sk.bind(('127.0.0.1',9090))
sk.listen()

while 1:
    # print(123)
    conn,addr = sk.accept() #  等待连接 -- 阻塞
    # print(456)
    while 1:
        # print(789)
        msg_r = conn.recv(1024).decode('utf-8') # 阻塞等待接收客户端发来的消息
        # print('jqk')
        print('接收到来自%s的一个消息:%s' % (addr, msg_r))
        if msg_r == 'q':
            break
        msg_s = input('>>>')
        conn.send(msg_s.encode('utf-8'))# 发送给客户端消息
        if msg_s == 'q':
            break
    conn.close()# 服务器和当前客户端断开连接,程序回到上一层死循环,重新等待客户端的连接
sk.close()




from socket import  socket
sk = socket()
sk.connect(('127.0.0.1',9090))

while 1:
    msg_s = input('>>>')
    sk.send(msg_s.encode('utf-8'))
    if msg_s == 'q':
        break
    msg_r = sk.recv(1024).decode('utf-8')
    print(msg_r)
    if msg_r == 'q':
        break

sk.close()
复制代码
udp颜色代码

复制代码
import socket
sk = socket.socket(type=socket.SOCK_DGRAM)# udp协议
sk.bind(('127.0.0.1',9090))
dic = {'alex':'\033[0;33;42m','太白':'\033[0;35;40m'}
while 1:
    msg_r,addr = sk.recvfrom(1024)# 接收来自哪里的消息
    msg_r = msg_r.decode('utf-8')# alex : 我要退学
    # 对于msg_r,通过':'分割,获取下标为0的,也就是name,再去掉name的左右两边的空格
    name = msg_r.split(':')[0].strip()

    color = dic.get(name,'')# 获取字典中 name所对应的 颜色值
    print('%s%s \033[0m'%(color,msg_r))
    if msg_r == 'q':# 如果当前客户端想要断开连接
        continue # 服务器端不应该继续通话了,应该等待接收另一个客户端的连接,返回到recvfrom
    msg_s = input('>>>')
    sk.sendto(msg_s.encode('utf-8'), addr)
    if msg_s == 'q':
        break
sk.close()




import socket
sk = socket.socket(type=socket.SOCK_DGRAM)
name = input('请输入您的名字:>>>')
while 1:
    msg_s = input('>>>')
    msg_s = name + " : "+msg_s
    sk.sendto(msg_s.encode('utf-8'),('127.0.0.1',9090))# 发给谁一条消息
    if msg_s is 'q':
        break
    msg_r,addr = sk.recvfrom(1024)
    msg_r = msg_r.decode('utf-8')
    print(msg_r)
    if msg_r == 'q':
        break

sk.close()
复制代码
udp时间同步

复制代码
import socket
import time
sk = socket.socket(type=socket.SOCK_DGRAM)

sk.bind(('127.0.0.1',9090))

while 1:
    tm_format,addr = sk.recvfrom(1024)
    tm_format = tm_format.decode('utf-8')# %Y-%m\%d %H:%M:%S
    local_tm = time.strftime(tm_format)# 获取到了对应格式的当前时间
    sk.sendto(local_tm.encode('utf-8'),addr)# 返回给客户端

sk.close()





import socket
import time
sk = socket.socket(type=socket.SOCK_DGRAM)
tm_format = input('>>>')
while 1:
    sk.sendto(tm_format.encode('utf-8'),('127.0.0.1',9090))
    local_tm,addr = sk.recvfrom(1024)
    print(local_tm.decode('utf-8'))
    time.sleep(2)